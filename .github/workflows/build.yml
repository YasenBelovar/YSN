name: "Build YSN (2 backends: yt-dlp + youtube-dl)"

on: [push, workflow_dispatch]

jobs:
  build-backends:
    runs-on: windows-latest
    strategy:
      matrix:
        backend: ["yt-dlp", "youtube-dl"]
    env:
      PYTHON_VERSION: "3.11"
      RETENTION_DAYS: 90

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          pip install PySide6 pyinstaller
          if ($env:matrix_backend -eq "yt-dlp") {
            python -m pip install -U yt-dlp
          } else {
            python -m pip install "youtube-dl==2021.12.17"
          }
        env:
          matrix_backend: ${{ matrix.backend }}

      - name: Download and extract ffmpeg
        shell: powershell
        run: |
          $zip = "ffmpeg.zip"
          $url = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"
          Invoke-WebRequest -Uri $url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath ffmpeg_unpack -Force
          $ff = Get-ChildItem -Path ffmpeg_unpack -Recurse -Filter ffmpeg.exe | Select-Object -First 1
          if ($null -eq $ff) { Write-Host "ffmpeg.exe not found"; exit 1 }
          Copy-Item $ff.FullName -Destination ".\ffmpeg.exe"
          Remove-Item $zip

      - name: Show environment (debug)
        shell: powershell
        run: |
          python --version
          try { & where.exe ffmpeg } catch { Write-Host "ffmpeg not found in PATH" }
          Write-Host "Repo root files:"
          Get-ChildItem -Force -File | ForEach-Object { Write-Host $_.Name }

      - name: PyInstaller build (portable)
        shell: powershell
        run: |
          $exeName = "ysn-${{ matrix.backend }}"
          pyinstaller --noconsole --onefile --add-binary "ffmpeg.exe;." --icon "icon.ico" --name $exeName ysn.py

      - name: Upload portable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ysn-${{ matrix.backend }}-portable
          path: dist/ysn-${{ matrix.backend }}.exe
          retention-days: ${{ env.RETENTION_DAYS }}
          if-no-files-found: ignore

      - name: Install Inno Setup (Chocolatey)
        shell: powershell
        run: |
          choco install innosetup -y --no-progress

      - name: Build installer with Inno Setup (with logging)
        shell: powershell
        run: |
          $iscc_paths = @(
            "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
            "C:\Program Files\Inno Setup 6\ISCC.exe"
          )
          $iscc = $null
          foreach ($p in $iscc_paths) { if (Test-Path $p) { $iscc = $p; break } }

          Write-Host "Working directory: $(Get-Location)"
          Write-Host "Root files:"
          Get-ChildItem -Force -File | ForEach-Object { Write-Host $_.Name }
          Write-Host "Dist content:"
          if (Test-Path .\dist) { Get-ChildItem .\dist -Force | ForEach-Object { Write-Host $_.Name } } else { Write-Host "dist not found" }
          Write-Host "Checking icon.ico:"
          if (Test-Path .\icon.ico) { Write-Host "icon.ico present" } else { Write-Host "icon.ico MISSING" }
          Write-Host "Checking ISS file for backend:"
          $issName = "ysn-${{ matrix.backend }}.iss"
          if (Test-Path $issName) { Write-Host "$issName present" } else { Write-Host "$issName MISSING" }

          $logFile = "inno-log-${{ matrix.backend }}.txt"
          if (-not $iscc) {
            Write-Host "ISCC not found on runner; skipping installer build"
            "SKIPPED" | Out-File iscc-exit-${{ matrix.backend }}.txt -Encoding utf8
            "ISCC not found; installer skipped." | Out-File $logFile -Encoding utf8
          } else {
            Write-Host "Using ISCC at: $iscc"
            & $iscc $issName 2>&1 | Tee-Object -FilePath $logFile
            $exit = $LASTEXITCODE
            $exit.ToString() | Out-File iscc-exit-${{ matrix.backend }}.txt -Encoding utf8
            Write-Host "ISCC exit code: $exit"
          }

      - name: Upload Inno logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: inno-log-${{ matrix.backend }}
          path: |
            inno-log-${{ matrix.backend }}.txt
            iscc-exit-${{ matrix.backend }}.txt
          retention-days: ${{ env.RETENTION_DAYS }}
          if-no-files-found: ignore

      - name: Upload installer artifact (if produced)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ysn-${{ matrix.backend }}-installer
          path: |
            Output\YSN-${{ matrix.backend }}-Setup.exe
            dist/ysn-${{ matrix.backend }}.exe
          retention-days: ${{ env.RETENTION_DAYS }}
          if-no-files-found: ignore

      - name: Fail if installer compilation failed
        if: always()
        shell: powershell
        run: |
          $marker = "iscc-exit-${{ matrix.backend }}.txt"
          if (Test-Path $marker) {
            $content = Get-Content $marker -Raw
            if ($content -match '^\s*SKIPPED\s*$') { Write-Host "Installer skipped (no ISCC)"; exit 0 }
            $code = 0
            [int]::TryParse($content.Trim(), [ref]$code) | Out-Null
            if ($code -ne 0) {
              Write-Error "Installer compilation failed with exit code $code for backend $env:matrix_backend. See inno-log-${{ matrix.backend }} artifact."
              exit $code
            } else {
              Write-Host "Installer compilation succeeded (exit code 0)."
            }
          } else {
            Write-Host "No iscc-exit marker found; nothing to check."
          }
